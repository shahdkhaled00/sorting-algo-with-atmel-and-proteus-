
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800092  00800092  00000b64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168d  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c23  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d79  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000582  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f40  00000000  00000000  00004576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000054b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_11>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	d3 01       	movw	r26, r6
  56:	da 01       	movw	r26, r20
  58:	e0 01       	movw	r28, r0
  5a:	10 02       	muls	r17, r16
  5c:	e7 01       	movw	r28, r14
  5e:	ed 01       	movw	r28, r26
  60:	f4 01       	movw	r30, r8
  62:	10 02       	muls	r17, r16
  64:	fb 01       	movw	r30, r22
  66:	00 02       	muls	r16, r16
  68:	06 02       	muls	r16, r22
  6a:	10 02       	muls	r17, r16
  6c:	10 02       	muls	r17, r16
  6e:	0d 02       	muls	r16, r29

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf e5       	ldi	r28, 0x5F	; 95
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	10 e0       	ldi	r17, 0x00	; 0
  7e:	a0 e6       	ldi	r26, 0x60	; 96
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	ee e9       	ldi	r30, 0x9E	; 158
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 39       	cpi	r26, 0x92	; 146
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	a2 e9       	ldi	r26, 0x92	; 146
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 3a       	cpi	r26, 0xAC	; 172
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <main>
  a6:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <get_ascii_of_number>:
uint8 counter_num=0;

uint8 get_ascii_of_number(uint8 num)
{
	return (uint8) (num + '0');
}                          // 22 27  500 ---------->
  ae:	80 5d       	subi	r24, 0xD0	; 208
  b0:	08 95       	ret

000000b2 <DisplaySortedNum>:

void DisplaySortedNum(uint16 arr[], uint8 n) {
  b2:	5f 92       	push	r5
  b4:	6f 92       	push	r6
  b6:	7f 92       	push	r7
  b8:	8f 92       	push	r8
  ba:	9f 92       	push	r9
  bc:	af 92       	push	r10
  be:	bf 92       	push	r11
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	4c 01       	movw	r8, r24
  d6:	56 2e       	mov	r5, r22
	
	charArr[idx-1] = '\0';
	LCD_String(charArr);

	
}
  d8:	6d b6       	in	r6, 0x3d	; 61
  da:	7e b6       	in	r7, 0x3e	; 62
{
	return (uint8) (num + '0');
}                          // 22 27  500 ---------->

void DisplaySortedNum(uint16 arr[], uint8 n) {
	uint16 arr2[n][4];
  dc:	a6 2e       	mov	r10, r22
  de:	b1 2c       	mov	r11, r1
  e0:	c5 01       	movw	r24, r10
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	2d b7       	in	r18, 0x3d	; 61
  f0:	3e b7       	in	r19, 0x3e	; 62
  f2:	28 1b       	sub	r18, r24
  f4:	39 0b       	sbc	r19, r25
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	3e bf       	out	0x3e, r19	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	2d bf       	out	0x3d, r18	; 61
 100:	8d b7       	in	r24, 0x3d	; 61
 102:	9e b7       	in	r25, 0x3e	; 62
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	7c 01       	movw	r14, r24
	
	for (uint16 i = 0; i < n; ++i) {
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	18 c0       	rjmp	.+48     	; 0x13e <DisplaySortedNum+0x8c>
		for (uint16 j = 0; j < 4; ++j) {
			arr2[i][j] = 10;
 10e:	f9 01       	movw	r30, r18
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ee 0d       	add	r30, r14
 122:	ff 1d       	adc	r31, r15
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	51 83       	std	Z+1, r21	; 0x01
 12a:	40 83       	st	Z, r20

void DisplaySortedNum(uint16 arr[], uint8 n) {
	uint16 arr2[n][4];
	
	for (uint16 i = 0; i < n; ++i) {
		for (uint16 j = 0; j < 4; ++j) {
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DisplaySortedNum+0x82>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	91 05       	cpc	r25, r1
 138:	50 f3       	brcs	.-44     	; 0x10e <DisplaySortedNum+0x5c>
}                          // 22 27  500 ---------->

void DisplaySortedNum(uint16 arr[], uint8 n) {
	uint16 arr2[n][4];
	
	for (uint16 i = 0; i < n; ++i) {
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	2a 15       	cp	r18, r10
 140:	3b 05       	cpc	r19, r11
 142:	b0 f3       	brcs	.-20     	; 0x130 <DisplaySortedNum+0x7e>
 144:	c1 2c       	mov	r12, r1
 146:	d1 2c       	mov	r13, r1
 148:	45 c0       	rjmp	.+138    	; 0x1d4 <DisplaySortedNum+0x122>
		}
	}
	
	
	for (uint16 i = 0;i<n;i++) {
		uint16 curr = arr[i];
 14a:	f6 01       	movw	r30, r12
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e8 0d       	add	r30, r8
 152:	f9 1d       	adc	r31, r9
 154:	01 90       	ld	r0, Z+
 156:	f0 81       	ld	r31, Z
 158:	e0 2d       	mov	r30, r0
		uint16 dig = 0;
		uint16 idx = 0;
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
		
		while (curr > 0) {
 15e:	35 c0       	rjmp	.+106    	; 0x1ca <DisplaySortedNum+0x118>
			dig = curr % 10;
 160:	9f 01       	movw	r18, r30
 162:	ad ec       	ldi	r26, 0xCD	; 205
 164:	bc ec       	ldi	r27, 0xCC	; 204
 166:	0e 94 2a 05 	call	0xa54	; 0xa54 <__umulhisi3>
 16a:	ac 01       	movw	r20, r24
 16c:	56 95       	lsr	r21
 16e:	47 95       	ror	r20
 170:	56 95       	lsr	r21
 172:	47 95       	ror	r20
 174:	56 95       	lsr	r21
 176:	47 95       	ror	r20
 178:	ca 01       	movw	r24, r20
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	48 0f       	add	r20, r24
 18c:	59 1f       	adc	r21, r25
 18e:	df 01       	movw	r26, r30
 190:	a4 1b       	sub	r26, r20
 192:	b5 0b       	sbc	r27, r21
 194:	ad 01       	movw	r20, r26
			curr /= 10;
 196:	ad ec       	ldi	r26, 0xCD	; 205
 198:	bc ec       	ldi	r27, 0xCC	; 204
 19a:	0e 94 2a 05 	call	0xa54	; 0xa54 <__umulhisi3>
 19e:	fc 01       	movw	r30, r24
 1a0:	f6 95       	lsr	r31
 1a2:	e7 95       	ror	r30
 1a4:	f6 95       	lsr	r31
 1a6:	e7 95       	ror	r30
 1a8:	f6 95       	lsr	r31
 1aa:	e7 95       	ror	r30
			arr2[i][idx] = dig;
 1ac:	d6 01       	movw	r26, r12
 1ae:	aa 0f       	add	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	aa 0f       	add	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	a0 0f       	add	r26, r16
 1b8:	b1 1f       	adc	r27, r17
 1ba:	aa 0f       	add	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	ae 0d       	add	r26, r14
 1c0:	bf 1d       	adc	r27, r15
 1c2:	4d 93       	st	X+, r20
 1c4:	5c 93       	st	X, r21
			idx++;
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint16 i = 0;i<n;i++) {
		uint16 curr = arr[i];
		uint16 dig = 0;
		uint16 idx = 0;
		
		while (curr > 0) {
 1ca:	30 97       	sbiw	r30, 0x00	; 0
 1cc:	49 f6       	brne	.-110    	; 0x160 <DisplaySortedNum+0xae>
			arr2[i][j] = 10;
		}
	}
	
	
	for (uint16 i = 0;i<n;i++) {
 1ce:	bf ef       	ldi	r27, 0xFF	; 255
 1d0:	cb 1a       	sub	r12, r27
 1d2:	db 0a       	sbc	r13, r27
 1d4:	ca 14       	cp	r12, r10
 1d6:	db 04       	cpc	r13, r11
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <DisplaySortedNum+0x12a>
 1da:	b7 cf       	rjmp	.-146    	; 0x14a <DisplaySortedNum+0x98>
			arr2[i][idx] = dig;
			idx++;
		}
	}
	
	const uint8 charsize=n*4;
 1dc:	55 0c       	add	r5, r5
 1de:	55 0c       	add	r5, r5
	uint8 charArr[charsize];
 1e0:	2d b7       	in	r18, 0x3d	; 61
 1e2:	3e b7       	in	r19, 0x3e	; 62
 1e4:	25 19       	sub	r18, r5
 1e6:	31 09       	sbc	r19, r1
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	3e bf       	out	0x3e, r19	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	2d bf       	out	0x3d, r18	; 61
 1f2:	8d b7       	in	r24, 0x3d	; 61
 1f4:	9e b7       	in	r25, 0x3e	; 62
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	6c 01       	movw	r12, r24
	uint16 idx = 0;
	for (uint16 i = 0; i < n; ++i) {
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	
	const uint8 charsize=n*4;
	uint8 charArr[charsize];
	uint16 idx = 0;
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	50 e0       	ldi	r21, 0x00	; 0
	for (uint16 i = 0; i < n; ++i) {
 202:	2a c0       	rjmp	.+84     	; 0x258 <DisplaySortedNum+0x1a6>
		for (uint16 j = 3; j <=3; --j) {
			if(arr2[i][j] != 10){
 204:	fb 01       	movw	r30, r22
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	ee 0d       	add	r30, r14
 218:	ff 1d       	adc	r31, r15
 21a:	01 90       	ld	r0, Z+
 21c:	f0 81       	ld	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	ea 30       	cpi	r30, 0x0A	; 10
 222:	f1 05       	cpc	r31, r1
 224:	41 f0       	breq	.+16     	; 0x236 <DisplaySortedNum+0x184>
				charArr[idx] = (uint8*)(arr2[i][j] + '0');
 226:	f0 96       	adiw	r30, 0x30	; 48
 228:	86 01       	movw	r16, r12
 22a:	04 0f       	add	r16, r20
 22c:	15 1f       	adc	r17, r21
 22e:	d8 01       	movw	r26, r16
 230:	ec 93       	st	X, r30
				idx++;
 232:	4f 5f       	subi	r20, 0xFF	; 255
 234:	5f 4f       	sbci	r21, 0xFF	; 255
	
	const uint8 charsize=n*4;
	uint8 charArr[charsize];
	uint16 idx = 0;
	for (uint16 i = 0; i < n; ++i) {
		for (uint16 j = 3; j <=3; --j) {
 236:	21 50       	subi	r18, 0x01	; 1
 238:	31 09       	sbc	r19, r1
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DisplaySortedNum+0x18e>
 23c:	23 e0       	ldi	r18, 0x03	; 3
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	24 30       	cpi	r18, 0x04	; 4
 242:	31 05       	cpc	r19, r1
 244:	f8 f2       	brcs	.-66     	; 0x204 <DisplaySortedNum+0x152>
			if(arr2[i][j] != 10){
				charArr[idx] = (uint8*)(arr2[i][j] + '0');
				idx++;
			}
		}
		charArr[idx] = '-';
 246:	f6 01       	movw	r30, r12
 248:	e4 0f       	add	r30, r20
 24a:	f5 1f       	adc	r31, r21
 24c:	2d e2       	ldi	r18, 0x2D	; 45
 24e:	20 83       	st	Z, r18

		idx++;
 250:	4f 5f       	subi	r20, 0xFF	; 255
 252:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	const uint8 charsize=n*4;
	uint8 charArr[charsize];
	uint16 idx = 0;
	for (uint16 i = 0; i < n; ++i) {
 254:	6f 5f       	subi	r22, 0xFF	; 255
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	6a 15       	cp	r22, r10
 25a:	7b 05       	cpc	r23, r11
 25c:	78 f3       	brcs	.-34     	; 0x23c <DisplaySortedNum+0x18a>
		charArr[idx] = '-';

		idx++;
	}
	
	charArr[idx-1] = '\0';
 25e:	41 50       	subi	r20, 0x01	; 1
 260:	51 09       	sbc	r21, r1
 262:	fc 01       	movw	r30, r24
 264:	e4 0f       	add	r30, r20
 266:	f5 1f       	adc	r31, r21
 268:	10 82       	st	Z, r1
	LCD_String(charArr);
 26a:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_String>

	
}
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	7e be       	out	0x3e, r7	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	6d be       	out	0x3d, r6	; 61
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	7f 90       	pop	r7
 292:	6f 90       	pop	r6
 294:	5f 90       	pop	r5
 296:	08 95       	ret

00000298 <selection_sort>:


void selection_sort(uint16 arr[], uint8 n) {
 298:	cf 93       	push	r28
 29a:	9c 01       	movw	r18, r24
	
		uint8 i, j, min_idx;
		
		// One by one move boundary of unsorted subarray
		for (i = 0; i < n - 1; i++) {
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	32 c0       	rjmp	.+100    	; 0x304 <selection_sort+0x6c>
			// Find the minimum element in unsorted array
			min_idx = i;
			for (j = i + 1; j < n; j++)
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	7c 0f       	add	r23, r28
		uint8 i, j, min_idx;
		
		// One by one move boundary of unsorted subarray
		for (i = 0; i < n - 1; i++) {
			// Find the minimum element in unsorted array
			min_idx = i;
 2a4:	8c 2f       	mov	r24, r28
			for (j = i + 1; j < n; j++)
 2a6:	97 2f       	mov	r25, r23
 2a8:	15 c0       	rjmp	.+42     	; 0x2d4 <selection_sort+0x3c>
			{
				if (arr[j] < arr[min_idx])
 2aa:	e9 2f       	mov	r30, r25
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	e2 0f       	add	r30, r18
 2b4:	f3 1f       	adc	r31, r19
 2b6:	a0 81       	ld	r26, Z
 2b8:	b1 81       	ldd	r27, Z+1	; 0x01
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e2 0f       	add	r30, r18
 2c4:	f3 1f       	adc	r31, r19
 2c6:	40 81       	ld	r20, Z
 2c8:	51 81       	ldd	r21, Z+1	; 0x01
 2ca:	a4 17       	cp	r26, r20
 2cc:	b5 07       	cpc	r27, r21
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <selection_sort+0x3a>
				{
					min_idx = j;
 2d0:	89 2f       	mov	r24, r25
		
		// One by one move boundary of unsorted subarray
		for (i = 0; i < n - 1; i++) {
			// Find the minimum element in unsorted array
			min_idx = i;
			for (j = i + 1; j < n; j++)
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	96 17       	cp	r25, r22
 2d6:	48 f3       	brcs	.-46     	; 0x2aa <selection_sort+0x12>
				{
					min_idx = j;
				}
			}
			// Swap the found minimum element with the first element
			uint16 temp = arr[min_idx];
 2d8:	e8 2f       	mov	r30, r24
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	e2 0f       	add	r30, r18
 2e2:	f3 1f       	adc	r31, r19
 2e4:	80 81       	ld	r24, Z
 2e6:	91 81       	ldd	r25, Z+1	; 0x01
			arr[min_idx] = arr[i];
 2e8:	ac 2f       	mov	r26, r28
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	aa 0f       	add	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	a2 0f       	add	r26, r18
 2f2:	b3 1f       	adc	r27, r19
 2f4:	4d 91       	ld	r20, X+
 2f6:	5c 91       	ld	r21, X
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	51 83       	std	Z+1, r21	; 0x01
 2fc:	40 83       	st	Z, r20
			arr[i] = temp;
 2fe:	8d 93       	st	X+, r24
 300:	9c 93       	st	X, r25
void selection_sort(uint16 arr[], uint8 n) {
	
		uint8 i, j, min_idx;
		
		// One by one move boundary of unsorted subarray
		for (i = 0; i < n - 1; i++) {
 302:	c7 2f       	mov	r28, r23
 304:	4c 2f       	mov	r20, r28
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	86 2f       	mov	r24, r22
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	48 17       	cp	r20, r24
 310:	59 07       	cpc	r21, r25
 312:	34 f2       	brlt	.-116    	; 0x2a0 <selection_sort+0x8>
			// Swap the found minimum element with the first element
			uint16 temp = arr[min_idx];
			arr[min_idx] = arr[i];
			arr[i] = temp;
		}
	}
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <DisplaySortSSD>:
		


void DisplaySortSSD(){
	tick++;
 318:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <tick>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <tick>
	if(tick==NUMBER_OF_OVERFLOW && is_sorted==1){
 322:	8e 33       	cpi	r24, 0x3E	; 62
 324:	e9 f4       	brne	.+58     	; 0x360 <DisplaySortSSD+0x48>
 326:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <is_sorted>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	c9 f4       	brne	.+50     	; 0x360 <DisplaySortSSD+0x48>
		
		LCD_Clear();
 32e:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_Clear>
		if(counter_num >= 0){
			disply_number(arr2[num]);
 332:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <num>
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	ec 56       	subi	r30, 0x6C	; 108
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	0e 94 55 04 	call	0x8aa	; 0x8aa <disply_number>
			num++;
 348:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <num>
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <num>
			tick=0;
 352:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <tick>
			counter_num--;
 356:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 360:	08 95       	ret

00000362 <processKeypadInput>:
	
void processKeypadInput(void)
{
	uint8 counter_digit = 0;
	uint16 digit = 0;
	uint16 temp_num = 0;
 362:	c0 e0       	ldi	r28, 0x00	; 0
 364:	d0 e0       	ldi	r29, 0x00	; 0
}
	
void processKeypadInput(void)
{
	uint8 counter_digit = 0;
	uint16 digit = 0;
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
	
}
	
void processKeypadInput(void)
{
	uint8 counter_digit = 0;
 36a:	10 e0       	ldi	r17, 0x00	; 0
	uint16 digit = 0;
	uint16 temp_num = 0;
	uint8 value;

	while (1) {
		CLR_SEV_SEG();
 36c:	0e 94 cb 04 	call	0x996	; 0x996 <CLR_SEV_SEG>
		value = keypad_get_value();
 370:	0e 94 bd 02 	call	0x57a	; 0x57a <keypad_get_value>
		if (value != INVALID_KEYPAD_PRESS) {
 374:	8f 3f       	cpi	r24, 0xFF	; 255
 376:	09 f4       	brne	.+2      	; 0x37a <processKeypadInput+0x18>
 378:	d1 c0       	rjmp	.+418    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
			if (counter_digit < 4 && value != 12 && value != 14 && value != 15) {
 37a:	14 30       	cpi	r17, 0x04	; 4
 37c:	08 f0       	brcs	.+2      	; 0x380 <processKeypadInput+0x1e>
 37e:	8d c0       	rjmp	.+282    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 380:	8c 30       	cpi	r24, 0x0C	; 12
 382:	09 f4       	brne	.+2      	; 0x386 <processKeypadInput+0x24>
 384:	8a c0       	rjmp	.+276    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 386:	8e 30       	cpi	r24, 0x0E	; 14
 388:	09 f4       	brne	.+2      	; 0x38c <processKeypadInput+0x2a>
 38a:	87 c0       	rjmp	.+270    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 38c:	8f 30       	cpi	r24, 0x0F	; 15
 38e:	09 f4       	brne	.+2      	; 0x392 <processKeypadInput+0x30>
 390:	84 c0       	rjmp	.+264    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			
				switch (value) {
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	8e 30       	cpi	r24, 0x0E	; 14
 396:	91 05       	cpc	r25, r1
 398:	08 f0       	brcs	.+2      	; 0x39c <processKeypadInput+0x3a>
 39a:	42 c0       	rjmp	.+132    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 39c:	fc 01       	movw	r30, r24
 39e:	e6 5d       	subi	r30, 0xD6	; 214
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__tablejump2__>
					case 0:
					digit = 7;
					++counter_digit;
 3a6:	1f 5f       	subi	r17, 0xFF	; 255
		if (value != INVALID_KEYPAD_PRESS) {
			if (counter_digit < 4 && value != 12 && value != 14 && value != 15) {
			
				switch (value) {
					case 0:
					digit = 7;
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f7 e0       	ldi	r31, 0x07	; 7
 3ac:	ef 2e       	mov	r14, r31
 3ae:	f1 2c       	mov	r15, r1
 3b0:	f0 2d       	mov	r31, r0
					++counter_digit;
					break;
 3b2:	36 c0       	rjmp	.+108    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 1:
					digit = 8;
					++counter_digit;
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
					case 0:
					digit = 7;
					++counter_digit;
					break;
					case 1:
					digit = 8;
 3b6:	68 94       	set
 3b8:	ee 24       	eor	r14, r14
 3ba:	e3 f8       	bld	r14, 3
 3bc:	f1 2c       	mov	r15, r1
					++counter_digit;
					break;
 3be:	30 c0       	rjmp	.+96     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 2:
					digit = 9;
					++counter_digit;
 3c0:	1f 5f       	subi	r17, 0xFF	; 255
					case 1:
					digit = 8;
					++counter_digit;
					break;
					case 2:
					digit = 9;
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f9 e0       	ldi	r31, 0x09	; 9
 3c6:	ef 2e       	mov	r14, r31
 3c8:	f1 2c       	mov	r15, r1
 3ca:	f0 2d       	mov	r31, r0
					++counter_digit;
					break;
 3cc:	29 c0       	rjmp	.+82     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 4:
					digit = 4;
					++counter_digit;
 3ce:	1f 5f       	subi	r17, 0xFF	; 255
					case 2:
					digit = 9;
					++counter_digit;
					break;
					case 4:
					digit = 4;
 3d0:	68 94       	set
 3d2:	ee 24       	eor	r14, r14
 3d4:	e2 f8       	bld	r14, 2
 3d6:	f1 2c       	mov	r15, r1
					++counter_digit;
					break;
 3d8:	23 c0       	rjmp	.+70     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 5:
					digit = 5;
					++counter_digit;
 3da:	1f 5f       	subi	r17, 0xFF	; 255
					case 4:
					digit = 4;
					++counter_digit;
					break;
					case 5:
					digit = 5;
 3dc:	0f 2e       	mov	r0, r31
 3de:	f5 e0       	ldi	r31, 0x05	; 5
 3e0:	ef 2e       	mov	r14, r31
 3e2:	f1 2c       	mov	r15, r1
 3e4:	f0 2d       	mov	r31, r0
					++counter_digit;
					break;
 3e6:	1c c0       	rjmp	.+56     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 6:
					digit = 6;
					++counter_digit;
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
					case 5:
					digit = 5;
					++counter_digit;
					break;
					case 6:
					digit = 6;
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f6 e0       	ldi	r31, 0x06	; 6
 3ee:	ef 2e       	mov	r14, r31
 3f0:	f1 2c       	mov	r15, r1
 3f2:	f0 2d       	mov	r31, r0
					++counter_digit;
					break;
 3f4:	15 c0       	rjmp	.+42     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 8:
					digit = 1;
					++counter_digit;
 3f6:	1f 5f       	subi	r17, 0xFF	; 255
					case 6:
					digit = 6;
					++counter_digit;
					break;
					case 8:
					digit = 1;
 3f8:	ee 24       	eor	r14, r14
 3fa:	e3 94       	inc	r14
 3fc:	f1 2c       	mov	r15, r1
					++counter_digit;
					break;
 3fe:	10 c0       	rjmp	.+32     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 9:
					digit = 2;
					++counter_digit;
 400:	1f 5f       	subi	r17, 0xFF	; 255
					case 8:
					digit = 1;
					++counter_digit;
					break;
					case 9:
					digit = 2;
 402:	68 94       	set
 404:	ee 24       	eor	r14, r14
 406:	e1 f8       	bld	r14, 1
 408:	f1 2c       	mov	r15, r1
					++counter_digit;
					break;
 40a:	0a c0       	rjmp	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 10:
					digit = 3;
					++counter_digit;
 40c:	1f 5f       	subi	r17, 0xFF	; 255
					case 9:
					digit = 2;
					++counter_digit;
					break;
					case 10:
					digit = 3;
 40e:	0f 2e       	mov	r0, r31
 410:	f3 e0       	ldi	r31, 0x03	; 3
 412:	ef 2e       	mov	r14, r31
 414:	f1 2c       	mov	r15, r1
 416:	f0 2d       	mov	r31, r0
					++counter_digit;
					break;
 418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case 13:
					digit = 0;
					++counter_digit;
 41a:	1f 5f       	subi	r17, 0xFF	; 255
					case 10:
					digit = 3;
					++counter_digit;
					break;
					case 13:
					digit = 0;
 41c:	e1 2c       	mov	r14, r1
 41e:	f1 2c       	mov	r15, r1
					++counter_digit;
					break;
				}
				switch (counter_digit) {
 420:	12 30       	cpi	r17, 0x02	; 2
 422:	61 f0       	breq	.+24     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 424:	18 f4       	brcc	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 426:	11 30       	cpi	r17, 0x01	; 1
 428:	31 f0       	breq	.+12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 42a:	31 c0       	rjmp	.+98     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 42c:	13 30       	cpi	r17, 0x03	; 3
 42e:	a1 f0       	breq	.+40     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 430:	14 30       	cpi	r17, 0x04	; 4
 432:	01 f1       	breq	.+64     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 434:	2c c0       	rjmp	.+88     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					case 1:
					temp_num += digit;
 436:	ce 0d       	add	r28, r14
 438:	df 1d       	adc	r29, r15
					break;
 43a:	29 c0       	rjmp	.+82     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					case 2:
					temp_num *= 10;
 43c:	ce 01       	movw	r24, r28
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	cc 0f       	add	r28, r28
 444:	dd 1f       	adc	r29, r29
 446:	cc 0f       	add	r28, r28
 448:	dd 1f       	adc	r29, r29
 44a:	cc 0f       	add	r28, r28
 44c:	dd 1f       	adc	r29, r29
 44e:	c8 0f       	add	r28, r24
 450:	d9 1f       	adc	r29, r25
					temp_num += digit;
 452:	ce 0d       	add	r28, r14
 454:	df 1d       	adc	r29, r15
					break;
 456:	1b c0       	rjmp	.+54     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					case 3:
					temp_num *= 10;
 458:	ce 01       	movw	r24, r28
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	cc 0f       	add	r28, r28
 460:	dd 1f       	adc	r29, r29
 462:	cc 0f       	add	r28, r28
 464:	dd 1f       	adc	r29, r29
 466:	cc 0f       	add	r28, r28
 468:	dd 1f       	adc	r29, r29
 46a:	c8 0f       	add	r28, r24
 46c:	d9 1f       	adc	r29, r25
					temp_num += digit;
 46e:	ce 0d       	add	r28, r14
 470:	df 1d       	adc	r29, r15
					break;
 472:	0d c0       	rjmp	.+26     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					case 4:
					temp_num *= 10;
 474:	ce 01       	movw	r24, r28
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	cc 0f       	add	r28, r28
 47c:	dd 1f       	adc	r29, r29
 47e:	cc 0f       	add	r28, r28
 480:	dd 1f       	adc	r29, r29
 482:	cc 0f       	add	r28, r28
 484:	dd 1f       	adc	r29, r29
 486:	c8 0f       	add	r28, r24
 488:	d9 1f       	adc	r29, r25
					temp_num += digit;
 48a:	ce 0d       	add	r28, r14
 48c:	df 1d       	adc	r29, r15
					break;
				}

				LCD_Char(get_ascii_of_number(digit));
 48e:	8e 2d       	mov	r24, r14
 490:	0e 94 57 00 	call	0xae	; 0xae <get_ascii_of_number>
 494:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_Char>
 498:	41 c0       	rjmp	.+130    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
				}
				else if (value == 15) {  // +
 49a:	8f 30       	cpi	r24, 0x0F	; 15
 49c:	a1 f4       	brne	.+40     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				//LCD_Clear();
				
				LCD_Char(' ');
 49e:	80 e2       	ldi	r24, 0x20	; 32
 4a0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_Char>
				counter_digit = 0;
				
				arr2[counter_num] = temp_num;
 4a4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 4a8:	e8 2f       	mov	r30, r24
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ec 56       	subi	r30, 0x6C	; 108
 4b2:	ff 4f       	sbci	r31, 0xFF	; 255
 4b4:	d1 83       	std	Z+1, r29	; 0x01
 4b6:	c0 83       	st	Z, r28
				temp_num = 0;
				counter_num++;
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
				
				LCD_Char(' ');
				counter_digit = 0;
				
				arr2[counter_num] = temp_num;
				temp_num = 0;
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else if (value == 15) {  // +
				//LCD_Clear();
				
				LCD_Char(' ');
				counter_digit = 0;
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	2b c0       	rjmp	.+86     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
				arr2[counter_num] = temp_num;
				temp_num = 0;
				counter_num++;
				}
				
				else if (value == 14) {  // =
 4c6:	8e 30       	cpi	r24, 0x0E	; 14
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
				LCD_Clear();
 4ca:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_Clear>
				selection_sort(arr2, counter_num); //show on lcd 
 4ce:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <__data_end>
 4d2:	84 e9       	ldi	r24, 0x94	; 148
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 4c 01 	call	0x298	; 0x298 <selection_sort>
				DisplaySortedNum(arr2, counter_num);    //display on lcd 
 4da:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <__data_end>
 4de:	84 e9       	ldi	r24, 0x94	; 148
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 59 00 	call	0xb2	; 0xb2 <DisplaySortedNum>
				is_sorted = 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <is_sorted>
				tick = 25;
 4ec:	89 e1       	ldi	r24, 0x19	; 25
 4ee:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <tick>
 4f2:	14 c0       	rjmp	.+40     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
				}
				
				else if (value == 12) {  // on/c
 4f4:	8c 30       	cpi	r24, 0x0C	; 12
 4f6:	91 f4       	brne	.+36     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
				LCD_Clear();
 4f8:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_Clear>
				counter_digit = 0;
				arr2[counter_num] = temp_num;
 4fc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 500:	e8 2f       	mov	r30, r24
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	ec 56       	subi	r30, 0x6C	; 108
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	d1 83       	std	Z+1, r29	; 0x01
 50e:	c0 83       	st	Z, r28
				temp_num = 0;
				counter_num++;
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
				
				else if (value == 12) {  // on/c
				LCD_Clear();
				counter_digit = 0;
				arr2[counter_num] = temp_num;
				temp_num = 0;
 516:	c0 e0       	ldi	r28, 0x00	; 0
 518:	d0 e0       	ldi	r29, 0x00	; 0
				tick = 25;
				}
				
				else if (value == 12) {  // on/c
				LCD_Clear();
				counter_digit = 0;
 51a:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	8b ea       	ldi	r24, 0xAB	; 171
 520:	9d e0       	ldi	r25, 0x0D	; 13
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52c:	00 00       	nop
 52e:	1e cf       	rjmp	.-452    	; 0x36c <processKeypadInput+0xa>

00000530 <keypad_init>:
							   {12,13,14,15}};


void keypad_init()
{
	CLR_BIT(DDRD,7);
 530:	81 b3       	in	r24, 0x11	; 17
 532:	8f 77       	andi	r24, 0x7F	; 127
 534:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,6);
 536:	81 b3       	in	r24, 0x11	; 17
 538:	8f 7b       	andi	r24, 0xBF	; 191
 53a:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,5);
 53c:	81 b3       	in	r24, 0x11	; 17
 53e:	8f 7d       	andi	r24, 0xDF	; 223
 540:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,3);
 542:	81 b3       	in	r24, 0x11	; 17
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	81 bb       	out	0x11, r24	; 17

	SET_BIT(DDRC,5);
 548:	84 b3       	in	r24, 0x14	; 20
 54a:	80 62       	ori	r24, 0x20	; 32
 54c:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,4);
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	80 61       	ori	r24, 0x10	; 16
 552:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,3);
 554:	84 b3       	in	r24, 0x14	; 20
 556:	88 60       	ori	r24, 0x08	; 8
 558:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,2);
 55a:	84 b3       	in	r24, 0x14	; 20
 55c:	84 60       	ori	r24, 0x04	; 4
 55e:	84 bb       	out	0x14, r24	; 20

	SET_BIT(PORTD,7);
 560:	82 b3       	in	r24, 0x12	; 18
 562:	80 68       	ori	r24, 0x80	; 128
 564:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,6);
 566:	82 b3       	in	r24, 0x12	; 18
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,5);
 56c:	82 b3       	in	r24, 0x12	; 18
 56e:	80 62       	ori	r24, 0x20	; 32
 570:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,3);
 572:	82 b3       	in	r24, 0x12	; 18
 574:	88 60       	ori	r24, 0x08	; 8
 576:	82 bb       	out	0x12, r24	; 18
 578:	08 95       	ret

0000057a <keypad_get_value>:

}

unsigned char keypad_get_value()
{
	unsigned char col,row,ans=INVALID_KEYPAD_PRESS;
 57a:	8f ef       	ldi	r24, 0xFF	; 255

 for(row=5;row>=2;row--){
 57c:	e5 e0       	ldi	r30, 0x05	; 5
 57e:	62 c0       	rjmp	.+196    	; 0x644 <keypad_get_value+0xca>

     PORTC |= 0b00111100;
 580:	95 b3       	in	r25, 0x15	; 21
 582:	9c 63       	ori	r25, 0x3C	; 60
 584:	95 bb       	out	0x15, r25	; 21
     CLR_BIT(PORTC,row);
 586:	95 b3       	in	r25, 0x15	; 21
 588:	6e 2f       	mov	r22, r30
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	0e 2e       	mov	r0, r30
 592:	02 c0       	rjmp	.+4      	; 0x598 <keypad_get_value+0x1e>
 594:	22 0f       	add	r18, r18
 596:	33 1f       	adc	r19, r19
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <keypad_get_value+0x1a>
 59c:	20 95       	com	r18
 59e:	29 23       	and	r18, r25
 5a0:	25 bb       	out	0x15, r18	; 21
     for(col=7;col>=3;col--){
 5a2:	97 e0       	ldi	r25, 0x07	; 7
 5a4:	4b c0       	rjmp	.+150    	; 0x63c <keypad_get_value+0xc2>
      if(col==4)
 5a6:	94 30       	cpi	r25, 0x04	; 4
 5a8:	09 f4       	brne	.+2      	; 0x5ac <keypad_get_value+0x32>
      col--;
 5aa:	91 50       	subi	r25, 0x01	; 1
      if(GET_BIT(PIND,col)==0){
 5ac:	20 b3       	in	r18, 0x10	; 16
 5ae:	49 2f       	mov	r20, r25
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	09 2e       	mov	r0, r25
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <keypad_get_value+0x42>
 5b8:	35 95       	asr	r19
 5ba:	27 95       	ror	r18
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <keypad_get_value+0x3e>
 5c0:	20 fd       	sbrc	r18, 0
 5c2:	3b c0       	rjmp	.+118    	; 0x63a <keypad_get_value+0xc0>
 5c4:	2f e3       	ldi	r18, 0x3F	; 63
 5c6:	3d e0       	ldi	r19, 0x0D	; 13
 5c8:	f3 e0       	ldi	r31, 0x03	; 3
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	30 40       	sbci	r19, 0x00	; 0
 5ce:	f0 40       	sbci	r31, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <keypad_get_value+0x50>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <keypad_get_value+0x5a>
 5d4:	00 00       	nop
    	  _delay_ms(1000);
    	  if(GET_BIT(PIND,col)==0){
 5d6:	20 b3       	in	r18, 0x10	; 16
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	09 2e       	mov	r0, r25
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <keypad_get_value+0x68>
 5de:	35 95       	asr	r19
 5e0:	27 95       	ror	r18
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <keypad_get_value+0x64>
 5e6:	20 fd       	sbrc	r18, 0
 5e8:	28 c0       	rjmp	.+80     	; 0x63a <keypad_get_value+0xc0>
    		  if(col==3){
 5ea:	93 30       	cpi	r25, 0x03	; 3
 5ec:	99 f4       	brne	.+38     	; 0x614 <keypad_get_value+0x9a>
    			  ans=arr[5-row][7-col-1];
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	86 1b       	sub	r24, r22
 5f4:	97 0b       	sbc	r25, r23
 5f6:	26 e0       	ldi	r18, 0x06	; 6
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	24 1b       	sub	r18, r20
 5fc:	35 0b       	sbc	r19, r21
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	80 5a       	subi	r24, 0xA0	; 160
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	dc 01       	movw	r26, r24
 60c:	a2 0f       	add	r26, r18
 60e:	b3 1f       	adc	r27, r19
 610:	8c 91       	ld	r24, X
    			  break;
 612:	17 c0       	rjmp	.+46     	; 0x642 <keypad_get_value+0xc8>
    		  }
    		  else{
    			  ans=arr[5-row][7-col];
 614:	85 e0       	ldi	r24, 0x05	; 5
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	86 1b       	sub	r24, r22
 61a:	97 0b       	sbc	r25, r23
 61c:	27 e0       	ldi	r18, 0x07	; 7
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	24 1b       	sub	r18, r20
 622:	35 0b       	sbc	r19, r21
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	80 5a       	subi	r24, 0xA0	; 160
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	dc 01       	movw	r26, r24
 632:	a2 0f       	add	r26, r18
 634:	b3 1f       	adc	r27, r19
 636:	8c 91       	ld	r24, X
    			   break;
 638:	04 c0       	rjmp	.+8      	; 0x642 <keypad_get_value+0xc8>

 for(row=5;row>=2;row--){

     PORTC |= 0b00111100;
     CLR_BIT(PORTC,row);
     for(col=7;col>=3;col--){
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	93 30       	cpi	r25, 0x03	; 3
 63e:	08 f0       	brcs	.+2      	; 0x642 <keypad_get_value+0xc8>
 640:	b2 cf       	rjmp	.-156    	; 0x5a6 <keypad_get_value+0x2c>

unsigned char keypad_get_value()
{
	unsigned char col,row,ans=INVALID_KEYPAD_PRESS;

 for(row=5;row>=2;row--){
 642:	e1 50       	subi	r30, 0x01	; 1
 644:	e2 30       	cpi	r30, 0x02	; 2
 646:	08 f0       	brcs	.+2      	; 0x64a <keypad_get_value+0xd0>
 648:	9b cf       	rjmp	.-202    	; 0x580 <keypad_get_value+0x6>
 64a:	2f e9       	ldi	r18, 0x9F	; 159
 64c:	36 e8       	ldi	r19, 0x86	; 134
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	21 50       	subi	r18, 0x01	; 1
 652:	30 40       	sbci	r19, 0x00	; 0
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <keypad_get_value+0xd6>
 658:	00 c0       	rjmp	.+0      	; 0x65a <keypad_get_value+0xe0>
 65a:	00 00       	nop
     }
}
}
  _delay_ms(500);
return ans;
}
 65c:	08 95       	ret

0000065e <LCD_Command>:
	LCD_Command(0x80);
}

void LCD_Command(unsigned char cmd)
{
	PORTB &= 0b11101000;
 65e:	98 b3       	in	r25, 0x18	; 24
 660:	98 7e       	andi	r25, 0xE8	; 232
 662:	98 bb       	out	0x18, r25	; 24
	PORTB |= (((((cmd&0xF0) >> 4) & 0b00001000) << 1) | (((cmd&0xF0) >> 4) & 0b00000111));
 664:	38 b3       	in	r19, 0x18	; 24
 666:	28 2f       	mov	r18, r24
 668:	22 95       	swap	r18
 66a:	2f 70       	andi	r18, 0x0F	; 15
 66c:	92 2f       	mov	r25, r18
 66e:	98 70       	andi	r25, 0x08	; 8
 670:	49 2f       	mov	r20, r25
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	44 0f       	add	r20, r20
 676:	55 1f       	adc	r21, r21
 678:	27 70       	andi	r18, 0x07	; 7
 67a:	42 2b       	or	r20, r18
 67c:	43 2b       	or	r20, r19
 67e:	48 bb       	out	0x18, r20	; 24
	CLR_BIT(LCD_Command_Port , RS);
 680:	9b b3       	in	r25, 0x1b	; 27
 682:	97 7f       	andi	r25, 0xF7	; 247
 684:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(LCD_Command_Port , EN);
 686:	9b b3       	in	r25, 0x1b	; 27
 688:	94 60       	ori	r25, 0x04	; 4
 68a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68c:	00 00       	nop
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
 68e:	9b b3       	in	r25, 0x1b	; 27
 690:	9b 7f       	andi	r25, 0xFB	; 251
 692:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 694:	e3 ef       	ldi	r30, 0xF3	; 243
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	31 97       	sbiw	r30, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_Command+0x3a>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_Command+0x40>
 69e:	00 00       	nop
	_delay_ms(2);
	
	PORTB &= 0b11101000;
 6a0:	98 b3       	in	r25, 0x18	; 24
 6a2:	98 7e       	andi	r25, 0xE8	; 232
 6a4:	98 bb       	out	0x18, r25	; 24
	PORTB |= ((((cmd & 0x0F) & 0b00001000) << 1) | ((cmd & 0x0F) & 0b00000111));
 6a6:	48 b3       	in	r20, 0x18	; 24
 6a8:	98 2f       	mov	r25, r24
 6aa:	98 70       	andi	r25, 0x08	; 8
 6ac:	29 2f       	mov	r18, r25
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	87 70       	andi	r24, 0x07	; 7
 6b6:	28 2b       	or	r18, r24
 6b8:	24 2b       	or	r18, r20
 6ba:	28 bb       	out	0x18, r18	; 24
	SET_BIT(LCD_Command_Port , EN);
 6bc:	8b b3       	in	r24, 0x1b	; 27
 6be:	84 60       	ori	r24, 0x04	; 4
 6c0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c2:	00 00       	nop
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
 6c4:	8b b3       	in	r24, 0x1b	; 27
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ca:	83 ef       	ldi	r24, 0xF3	; 243
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <LCD_Command+0x70>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <LCD_Command+0x76>
 6d4:	00 00       	nop
 6d6:	08 95       	ret

000006d8 <LCD_Init>:

#include "LCD.h"
#define SET_CURSOR_LOCATION (0X80)

void LCD_Init (void){
	LCD_Data_Dir |= 0b00010111;
 6d8:	87 b3       	in	r24, 0x17	; 23
 6da:	87 61       	ori	r24, 0x17	; 23
 6dc:	87 bb       	out	0x17, r24	; 23
	LCD_Command_Dir |= (1<< RS) | (1<< EN);
 6de:	8a b3       	in	r24, 0x1a	; 26
 6e0:	8c 60       	ori	r24, 0x0C	; 12
 6e2:	8a bb       	out	0x1a, r24	; 26
 6e4:	85 ea       	ldi	r24, 0xA5	; 165
 6e6:	9e e0       	ldi	r25, 0x0E	; 14
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <LCD_Init+0x10>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <LCD_Init+0x16>
 6ee:	00 00       	nop
	
	_delay_ms(15);
	LCD_Command(0x02);
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
	LCD_Command(0x28);
 6f6:	88 e2       	ldi	r24, 0x28	; 40
 6f8:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
	LCD_Command(0x0C);
 6fc:	8c e0       	ldi	r24, 0x0C	; 12
 6fe:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
	LCD_Command(0x06);
 702:	86 e0       	ldi	r24, 0x06	; 6
 704:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
	LCD_Command(0x01);
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
	LCD_Command(0x80);
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
 714:	08 95       	ret

00000716 <LCD_Char>:
	CLR_BIT(LCD_Command_Port , EN);
	_delay_ms(2);
}

void LCD_Char (unsigned char char_data){
	PORTB &= 0b11101000;
 716:	98 b3       	in	r25, 0x18	; 24
 718:	98 7e       	andi	r25, 0xE8	; 232
 71a:	98 bb       	out	0x18, r25	; 24
	PORTB |= (((((char_data & 0xF0) >> 4) & 0b00001000) << 1) | (((char_data & 0xF0) >> 4) & 0b00000111));
 71c:	38 b3       	in	r19, 0x18	; 24
 71e:	28 2f       	mov	r18, r24
 720:	22 95       	swap	r18
 722:	2f 70       	andi	r18, 0x0F	; 15
 724:	92 2f       	mov	r25, r18
 726:	98 70       	andi	r25, 0x08	; 8
 728:	49 2f       	mov	r20, r25
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	44 0f       	add	r20, r20
 72e:	55 1f       	adc	r21, r21
 730:	27 70       	andi	r18, 0x07	; 7
 732:	42 2b       	or	r20, r18
 734:	43 2b       	or	r20, r19
 736:	48 bb       	out	0x18, r20	; 24
	SET_BIT(LCD_Command_Port , RS);
 738:	9b b3       	in	r25, 0x1b	; 27
 73a:	98 60       	ori	r25, 0x08	; 8
 73c:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(LCD_Command_Port , EN);
 73e:	9b b3       	in	r25, 0x1b	; 27
 740:	94 60       	ori	r25, 0x04	; 4
 742:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	00 00       	nop
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
 746:	9b b3       	in	r25, 0x1b	; 27
 748:	9b 7f       	andi	r25, 0xFB	; 251
 74a:	9b bb       	out	0x1b, r25	; 27
 74c:	91 e2       	ldi	r25, 0x21	; 33
 74e:	9a 95       	dec	r25
 750:	f1 f7       	brne	.-4      	; 0x74e <LCD_Char+0x38>
 752:	00 00       	nop
	_delay_us(100);
	
	PORTB &= 0b11101000;
 754:	98 b3       	in	r25, 0x18	; 24
 756:	98 7e       	andi	r25, 0xE8	; 232
 758:	98 bb       	out	0x18, r25	; 24
	PORTB |= ((((char_data & 0x0F) & 0b00001000) << 1) | ((char_data & 0x0F) & 0b00000111));
 75a:	48 b3       	in	r20, 0x18	; 24
 75c:	98 2f       	mov	r25, r24
 75e:	98 70       	andi	r25, 0x08	; 8
 760:	29 2f       	mov	r18, r25
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	22 0f       	add	r18, r18
 766:	33 1f       	adc	r19, r19
 768:	87 70       	andi	r24, 0x07	; 7
 76a:	28 2b       	or	r18, r24
 76c:	24 2b       	or	r18, r20
 76e:	28 bb       	out	0x18, r18	; 24
    SET_BIT(LCD_Command_Port , EN);
 770:	8b b3       	in	r24, 0x1b	; 27
 772:	84 60       	ori	r24, 0x04	; 4
 774:	8b bb       	out	0x1b, r24	; 27
 776:	00 00       	nop
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
 778:	8b b3       	in	r24, 0x1b	; 27
 77a:	8b 7f       	andi	r24, 0xFB	; 251
 77c:	8b bb       	out	0x1b, r24	; 27
 77e:	81 e2       	ldi	r24, 0x21	; 33
 780:	8a 95       	dec	r24
 782:	f1 f7       	brne	.-4      	; 0x780 <LCD_Char+0x6a>
 784:	00 00       	nop
 786:	08 95       	ret

00000788 <LCD_String>:
	_delay_us(100);	
}

void LCD_String (char *str){
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	8c 01       	movw	r16, r24
	int i;
	for (i=0;str[i]!=0;i++){
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	03 c0       	rjmp	.+6      	; 0x79e <LCD_String+0x16>
		LCD_Char(str[i]);
 798:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_Char>
	_delay_us(100);	
}

void LCD_String (char *str){
	int i;
	for (i=0;str[i]!=0;i++){
 79c:	21 96       	adiw	r28, 0x01	; 1
 79e:	f8 01       	movw	r30, r16
 7a0:	ec 0f       	add	r30, r28
 7a2:	fd 1f       	adc	r31, r29
 7a4:	80 81       	ld	r24, Z
 7a6:	81 11       	cpse	r24, r1
 7a8:	f7 cf       	rjmp	.-18     	; 0x798 <LCD_String+0x10>
		LCD_Char(str[i]);
	}
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	08 95       	ret

000007b4 <LCD_goToRowCol>:

void LCD_goToRowCol(unsigned char row , unsigned char col){
	unsigned char Address =0;
	switch(row){
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <LCD_goToRowCol+0x12>
 7b8:	58 f0       	brcs	.+22     	; 0x7d0 <LCD_goToRowCol+0x1c>
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	31 f0       	breq	.+12     	; 0x7ca <LCD_goToRowCol+0x16>
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	31 f0       	breq	.+12     	; 0x7ce <LCD_goToRowCol+0x1a>
		LCD_Char(str[i]);
	}
}

void LCD_goToRowCol(unsigned char row , unsigned char col){
	unsigned char Address =0;
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <LCD_goToRowCol+0x1c>
	switch(row){
		case 0:
			Address = col;
			break;
		case 1:
			Address = col+0x40;
 7c6:	60 5c       	subi	r22, 0xC0	; 192
			break;
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <LCD_goToRowCol+0x1c>
		case 2:
			Address = col+0x14;
 7ca:	6c 5e       	subi	r22, 0xEC	; 236
			break;
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <LCD_goToRowCol+0x1c>
		case 3:
			Address = col+0x54;
 7ce:	6c 5a       	subi	r22, 0xAC	; 172
			break;
	}
	LCD_Command(Address | SET_CURSOR_LOCATION);
 7d0:	86 2f       	mov	r24, r22
 7d2:	80 68       	ori	r24, 0x80	; 128
 7d4:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
 7d8:	08 95       	ret

000007da <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_Command(0x01);
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Command>
 7e0:	08 95       	ret

000007e2 <main>:
 * 12 13 14 15        c 0 = +
 */


int main(void)
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	64 97       	sbiw	r28, 0x14	; 20
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
	uint8 tick=0;
	uint8 is_sorted=0;
	uint16 arr2[10]={0};
 7f6:	8e 01       	movw	r16, r28
 7f8:	0f 5f       	subi	r16, 0xFF	; 255
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	84 e1       	ldi	r24, 0x14	; 20
 7fe:	f8 01       	movw	r30, r16
 800:	11 92       	st	Z+, r1
 802:	8a 95       	dec	r24
 804:	e9 f7       	brne	.-6      	; 0x800 <__DATA_REGION_LENGTH__>
	uint8 num=0;
	uint8 counter_num=0;

	keypad_init();  //inatilaize keypad
 806:	0e 94 98 02 	call	0x530	; 0x530 <keypad_init>
	LCD_Init ();    //initailze lcd 
 80a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCD_Init>
	SEVENSEG_init();  // int segma
 80e:	0e 94 2b 04 	call	0x856	; 0x856 <SEVENSEG_init>
	timer0_init();    //int timer 
 812:	0e 94 01 05 	call	0xa02	; 0xa02 <timer0_init>
	timer0_setCallBack(&DisplaySortSSD);
 816:	8c e8       	ldi	r24, 0x8C	; 140
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	0e 94 0b 05 	call	0xa16	; 0xa16 <timer0_setCallBack>
	LCD_String("     HELLO !!!!");    
 81e:	80 e7       	ldi	r24, 0x70	; 112
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_String>
	LCD_goToRowCol(2 , 1);   // ????    ??? 
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_goToRowCol>
	LCD_String("  ENTER YOUR LIST");
 82e:	80 e8       	ldi	r24, 0x80	; 128
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_String>
	
	//calling the core functions 
	processKeypadInput();
 836:	0e 94 b1 01 	call	0x362	; 0x362 <processKeypadInput>
	selection_sort(arr2, counter_num);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	c8 01       	movw	r24, r16
 83e:	0e 94 4c 01 	call	0x298	; 0x298 <selection_sort>
	
	uint8 ascii_num = get_ascii_of_number(num);
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	0e 94 57 00 	call	0xae	; 0xae <get_ascii_of_number>

	DisplaySortedNum(arr2, counter_num);
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	c8 01       	movw	r24, r16
 84c:	0e 94 59 00 	call	0xb2	; 0xb2 <DisplaySortedNum>
	//_delay_ms(5000);
	DisplaySortSSD();
 850:	0e 94 8c 01 	call	0x318	; 0x318 <DisplaySortSSD>
 854:	ff cf       	rjmp	.-2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>

00000856 <SEVENSEG_init>:
#include "std_types.h"
#include <util/delay.h>

void SEVENSEG_init()
{
	SET_BIT(DDRB,0);
 856:	87 b3       	in	r24, 0x17	; 23
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,1);
 85c:	87 b3       	in	r24, 0x17	; 23
 85e:	82 60       	ori	r24, 0x02	; 2
 860:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,2);
 862:	87 b3       	in	r24, 0x17	; 23
 864:	84 60       	ori	r24, 0x04	; 4
 866:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,4);
 868:	87 b3       	in	r24, 0x17	; 23
 86a:	80 61       	ori	r24, 0x10	; 16
 86c:	87 bb       	out	0x17, r24	; 23
	PORTB &= 0b11101000;
 86e:	88 b3       	in	r24, 0x18	; 24
 870:	88 7e       	andi	r24, 0xE8	; 232
 872:	88 bb       	out	0x18, r24	; 24


	SET_BIT(DDRB,6);
 874:	87 b3       	in	r24, 0x17	; 23
 876:	80 64       	ori	r24, 0x40	; 64
 878:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,5);
 87a:	87 b3       	in	r24, 0x17	; 23
 87c:	80 62       	ori	r24, 0x20	; 32
 87e:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA,2);
 880:	8a b3       	in	r24, 0x1a	; 26
 882:	84 60       	ori	r24, 0x04	; 4
 884:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,3);
 886:	8a b3       	in	r24, 0x1a	; 26
 888:	88 60       	ori	r24, 0x08	; 8
 88a:	8a bb       	out	0x1a, r24	; 26
 88c:	08 95       	ret

0000088e <SEVENSEG_display>:


void SEVENSEG_display(int num)
{

	PORTB &= 0b11101000;
 88e:	28 b3       	in	r18, 0x18	; 24
 890:	28 7e       	andi	r18, 0xE8	; 232
 892:	28 bb       	out	0x18, r18	; 24
	PORTB |= (((num & 0b00001000)<<1)|(num & 0b00000111));
 894:	48 b3       	in	r20, 0x18	; 24
 896:	9c 01       	movw	r18, r24
 898:	28 70       	andi	r18, 0x08	; 8
 89a:	33 27       	eor	r19, r19
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	87 70       	andi	r24, 0x07	; 7
 8a2:	28 2b       	or	r18, r24
 8a4:	24 2b       	or	r18, r20
 8a6:	28 bb       	out	0x18, r18	; 24
 8a8:	08 95       	ret

000008aa <disply_number>:


}
void disply_number(int number)
{
 8aa:	af 92       	push	r10
 8ac:	bf 92       	push	r11
 8ae:	cf 92       	push	r12
 8b0:	df 92       	push	r13
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	fc 01       	movw	r30, r24
	int digit4 = ( number / 1000) % 10;
 8c0:	68 ee       	ldi	r22, 0xE8	; 232
 8c2:	73 e0       	ldi	r23, 0x03	; 3
 8c4:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8c8:	cb 01       	movw	r24, r22
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	b9 01       	movw	r22, r18
 8d0:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8d4:	7c 01       	movw	r14, r24
	int digit3 = ( number / 100) % 10;
 8d6:	cf 01       	movw	r24, r30
 8d8:	64 e6       	ldi	r22, 0x64	; 100
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8e0:	cb 01       	movw	r24, r22
 8e2:	b9 01       	movw	r22, r18
 8e4:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8e8:	8c 01       	movw	r16, r24
	int digit2 = ( number / 10) % 10;
 8ea:	cf 01       	movw	r24, r30
 8ec:	b9 01       	movw	r22, r18
 8ee:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8f2:	a8 2e       	mov	r10, r24
 8f4:	b9 2e       	mov	r11, r25
 8f6:	cb 01       	movw	r24, r22
 8f8:	b9 01       	movw	r22, r18
 8fa:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 8fe:	ec 01       	movw	r28, r24
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
 900:	c1 2c       	mov	r12, r1
 902:	d1 2c       	mov	r13, r1
	while (start_time < 1000) // Delay for 1 seconds
 904:	38 c0       	rjmp	.+112    	; 0x976 <disply_number+0xcc>
	{

		SEVENSEG_display(digit4);
 906:	c7 01       	movw	r24, r14
 908:	0e 94 47 04 	call	0x88e	; 0x88e <SEVENSEG_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90c:	8f e3       	ldi	r24, 0x3F	; 63
 90e:	9f e1       	ldi	r25, 0x1F	; 31
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <disply_number+0x66>
 914:	00 c0       	rjmp	.+0      	; 0x916 <disply_number+0x6c>
 916:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,6);
 918:	88 b3       	in	r24, 0x18	; 24
 91a:	20 e4       	ldi	r18, 0x40	; 64
 91c:	28 27       	eor	r18, r24
 91e:	28 bb       	out	0x18, r18	; 24
		SEVENSEG_display(digit3);
 920:	c8 01       	movw	r24, r16
 922:	0e 94 47 04 	call	0x88e	; 0x88e <SEVENSEG_display>
 926:	8f e3       	ldi	r24, 0x3F	; 63
 928:	9f e1       	ldi	r25, 0x1F	; 31
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <disply_number+0x80>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <disply_number+0x86>
 930:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,5);
 932:	88 b3       	in	r24, 0x18	; 24
 934:	20 e2       	ldi	r18, 0x20	; 32
 936:	28 27       	eor	r18, r24
 938:	28 bb       	out	0x18, r18	; 24
		SEVENSEG_display(digit2);
 93a:	ce 01       	movw	r24, r28
 93c:	0e 94 47 04 	call	0x88e	; 0x88e <SEVENSEG_display>
 940:	8f e3       	ldi	r24, 0x3F	; 63
 942:	9f e1       	ldi	r25, 0x1F	; 31
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <disply_number+0x9a>
 948:	00 c0       	rjmp	.+0      	; 0x94a <disply_number+0xa0>
 94a:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,2);
 94c:	8b b3       	in	r24, 0x1b	; 27
 94e:	24 e0       	ldi	r18, 0x04	; 4
 950:	28 27       	eor	r18, r24
 952:	2b bb       	out	0x1b, r18	; 27
		SEVENSEG_display(digit1);
 954:	8a 2d       	mov	r24, r10
 956:	9b 2d       	mov	r25, r11
 958:	0e 94 47 04 	call	0x88e	; 0x88e <SEVENSEG_display>
 95c:	8f e3       	ldi	r24, 0x3F	; 63
 95e:	9f e1       	ldi	r25, 0x1F	; 31
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <disply_number+0xb6>
 964:	00 c0       	rjmp	.+0      	; 0x966 <disply_number+0xbc>
 966:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,3);
 968:	8b b3       	in	r24, 0x1b	; 27
 96a:	28 e0       	ldi	r18, 0x08	; 8
 96c:	28 27       	eor	r18, r24
 96e:	2b bb       	out	0x1b, r18	; 27

		start_time += 5;
 970:	95 e0       	ldi	r25, 0x05	; 5
 972:	c9 0e       	add	r12, r25
 974:	d1 1c       	adc	r13, r1
	int digit2 = ( number / 10) % 10;
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
	while (start_time < 1000) // Delay for 1 seconds
 976:	88 ee       	ldi	r24, 0xE8	; 232
 978:	c8 16       	cp	r12, r24
 97a:	83 e0       	ldi	r24, 0x03	; 3
 97c:	d8 06       	cpc	r13, r24
 97e:	18 f2       	brcs	.-122    	; 0x906 <disply_number+0x5c>
		start_time += 5;


	}
	
}
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	ff 90       	pop	r15
 98a:	ef 90       	pop	r14
 98c:	df 90       	pop	r13
 98e:	cf 90       	pop	r12
 990:	bf 90       	pop	r11
 992:	af 90       	pop	r10
 994:	08 95       	ret

00000996 <CLR_SEV_SEG>:
void CLR_SEV_SEG()
{
	SET_BIT(PORTB,6);
 996:	88 b3       	in	r24, 0x18	; 24
 998:	80 64       	ori	r24, 0x40	; 64
 99a:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,5);
 99c:	88 b3       	in	r24, 0x18	; 24
 99e:	80 62       	ori	r24, 0x20	; 32
 9a0:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTA,2);
 9a2:	8b b3       	in	r24, 0x1b	; 27
 9a4:	84 60       	ori	r24, 0x04	; 4
 9a6:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA,3);
 9a8:	8b b3       	in	r24, 0x1b	; 27
 9aa:	88 60       	ori	r24, 0x08	; 8
 9ac:	8b bb       	out	0x1b, r24	; 27
 9ae:	08 95       	ret

000009b0 <__vector_11>:

#define I_BIT 7

void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect){
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR){
 9d2:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <g_callBackPtr>
 9d6:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <g_callBackPtr+0x1>
 9da:	30 97       	sbiw	r30, 0x00	; 0
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <__vector_11+0x30>
		(*g_callBackPtr)();
 9de:	09 95       	icall
	}
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <timer0_init>:

void timer0_init(void){
	TCNT0=0;
 a02:	12 be       	out	0x32, r1	; 50
	SET_BIT(TIMSK,TOIE0);//ENABLE TIMER OVERFLOE FLAG
 a04:	89 b7       	in	r24, 0x39	; 57
 a06:	81 60       	ori	r24, 0x01	; 1
 a08:	89 bf       	out	0x39, r24	; 57
	TCCR0=(1<<FOC0)|(1<<CS02)|(1<<CS00);//chose timer0 normall mode
 a0a:	85 e8       	ldi	r24, 0x85	; 133
 a0c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(SREG,I_BIT);//ENABLE GLOBAL INT
 a0e:	8f b7       	in	r24, 0x3f	; 63
 a10:	80 68       	ori	r24, 0x80	; 128
 a12:	8f bf       	out	0x3f, r24	; 63
 a14:	08 95       	ret

00000a16 <timer0_setCallBack>:
}

void timer0_setCallBack(void(*a_ptr)(void)){
	g_callBackPtr = a_ptr;
 a16:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <g_callBackPtr+0x1>
 a1a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <g_callBackPtr>
 a1e:	08 95       	ret

00000a20 <__divmodhi4>:
 a20:	97 fb       	bst	r25, 7
 a22:	07 2e       	mov	r0, r23
 a24:	16 f4       	brtc	.+4      	; 0xa2a <__divmodhi4+0xa>
 a26:	00 94       	com	r0
 a28:	07 d0       	rcall	.+14     	; 0xa38 <__divmodhi4_neg1>
 a2a:	77 fd       	sbrc	r23, 7
 a2c:	09 d0       	rcall	.+18     	; 0xa40 <__divmodhi4_neg2>
 a2e:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodhi4>
 a32:	07 fc       	sbrc	r0, 7
 a34:	05 d0       	rcall	.+10     	; 0xa40 <__divmodhi4_neg2>
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__divmodhi4_exit>

00000a38 <__divmodhi4_neg1>:
 a38:	90 95       	com	r25
 a3a:	81 95       	neg	r24
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	08 95       	ret

00000a40 <__divmodhi4_neg2>:
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255

00000a46 <__divmodhi4_exit>:
 a46:	08 95       	ret

00000a48 <__tablejump2__>:
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	05 90       	lpm	r0, Z+
 a4e:	f4 91       	lpm	r31, Z
 a50:	e0 2d       	mov	r30, r0
 a52:	09 94       	ijmp

00000a54 <__umulhisi3>:
 a54:	a2 9f       	mul	r26, r18
 a56:	b0 01       	movw	r22, r0
 a58:	b3 9f       	mul	r27, r19
 a5a:	c0 01       	movw	r24, r0
 a5c:	a3 9f       	mul	r26, r19
 a5e:	70 0d       	add	r23, r0
 a60:	81 1d       	adc	r24, r1
 a62:	11 24       	eor	r1, r1
 a64:	91 1d       	adc	r25, r1
 a66:	b2 9f       	mul	r27, r18
 a68:	70 0d       	add	r23, r0
 a6a:	81 1d       	adc	r24, r1
 a6c:	11 24       	eor	r1, r1
 a6e:	91 1d       	adc	r25, r1
 a70:	08 95       	ret

00000a72 <__udivmodhi4>:
 a72:	aa 1b       	sub	r26, r26
 a74:	bb 1b       	sub	r27, r27
 a76:	51 e1       	ldi	r21, 0x11	; 17
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <__udivmodhi4_ep>

00000a7a <__udivmodhi4_loop>:
 a7a:	aa 1f       	adc	r26, r26
 a7c:	bb 1f       	adc	r27, r27
 a7e:	a6 17       	cp	r26, r22
 a80:	b7 07       	cpc	r27, r23
 a82:	10 f0       	brcs	.+4      	; 0xa88 <__udivmodhi4_ep>
 a84:	a6 1b       	sub	r26, r22
 a86:	b7 0b       	sbc	r27, r23

00000a88 <__udivmodhi4_ep>:
 a88:	88 1f       	adc	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	5a 95       	dec	r21
 a8e:	a9 f7       	brne	.-22     	; 0xa7a <__udivmodhi4_loop>
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	bc 01       	movw	r22, r24
 a96:	cd 01       	movw	r24, r26
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
